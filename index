<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Analysis Dashboard</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React and ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    
    <!-- Babel for JSX transformation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Recharts -->
    <script src="https://unpkg.com/recharts@2.8.0/umd/Recharts.js"></script>
    
    <!-- SheetJS for Excel processing -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .icon {
            width: 20px;
            height: 20px;
            display: inline-block;
        }
        .icon-large {
            width: 32px;
            height: 32px;
        }
        .icon-small {
            width: 16px;
            height: 16px;
        }
        #loading-message {
            text-align: center;
            padding: 20px;
            font-size: 18px;
            color: #666;
        }
    </style>
</head>
<body>
    <div id="loading-message">Loading Dashboard...</div>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useMemo, useEffect } = React;
        const { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } = Recharts;

        // Simple SVG icons
        const UploadIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
        );

        const DownloadIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
        );

        const BarChartIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
        );

        const FilterIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z" />
            </svg>
        );

        const SearchIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        );

        const CalendarIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
        );

        const UsersIcon = () => (
            <svg className="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
            </svg>
        );

        const PaymentDashboard = () => {
            const [uploadedFiles, setUploadedFiles] = useState([]);
            const [allPayments, setAllPayments] = useState([]);
            const [filteredPayments, setFilteredPayments] = useState([]);
            const [selectedBeneficiary, setSelectedBeneficiary] = useState('All');
            const [dateRange, setDateRange] = useState({ start: '', end: '' });
            const [searchTerm, setSearchTerm] = useState('');
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState('');

            // Process uploaded files
            const handleFileUpload = async (event) => {
                const files = Array.from(event.target.files);
                setLoading(true);
                setError('');
                
                try {
                    const newPayments = [];
                    
                    for (const file of files) {
                        const data = await file.arrayBuffer();
                        const workbook = XLSX.read(data);
                        
                        for (const sheetName of workbook.SheetNames) {
                            const worksheet = workbook.Sheets[sheetName];
                            const jsonData = XLSX.utils.sheet_to_json(worksheet);
                            
                            jsonData.forEach(row => {
                                if (row.BNF_NAME && row.AMOUNT && row.PYMT_DATE) {
                                    // Parse Indian date format (DD-MM-YYYY)
                                    let parsedDate;
                                    if (typeof row.PYMT_DATE === 'string' && row.PYMT_DATE.includes('-')) {
                                        const parts = row.PYMT_DATE.split('-');
                                        if (parts.length === 3) {
                                            // Convert DD-MM-YYYY to YYYY-MM-DD for proper parsing
                                            const dd = parts[0];
                                            const mm = parts[1];
                                            const yyyy = parts[2];
                                            parsedDate = new Date(`${yyyy}-${mm}-${dd}`);
                                        }
                                    } else {
                                        parsedDate = new Date(row.PYMT_DATE);
                                    }
                                    
                                    // Only add if date is valid
                                    if (parsedDate && !isNaN(parsedDate)) {
                                        newPayments.push({
                                            beneficiaryName: row.BNF_NAME,
                                            amount: parseFloat(row.AMOUNT) || 0,
                                            paymentDate: parsedDate,
                                            paymentMode: row.PYMT_MODE || '',
                                            creditNarrative: row.CREDIT_NARR || '',
                                            accountNumber: row.BENE_ACC_NO || '',
                                            ifscCode: row.BENE_IFSC || '',
                                            fileName: file.name,
                                            id: `${file.name}_${row.BNF_NAME}_${row.PYMT_DATE}_${Math.random()}`
                                        });
                                    }
                                }
                            });
                        }
                    }
                    
                    setUploadedFiles(prev => [...prev, ...files.map(f => f.name)]);
                    setAllPayments(prev => [...prev, ...newPayments]);
                    setFilteredPayments(prev => [...prev, ...newPayments]);
                } catch (error) {
                    setError('Error processing files: ' + error.message);
                }
                
                setLoading(false);
                event.target.value = '';
            };

            // Get unique beneficiaries for dropdown
            const beneficiaries = useMemo(() => {
                const unique = [...new Set(allPayments.map(p => p.beneficiaryName))].sort();
                return ['All', ...unique];
            }, [allPayments]);

            // Filter payments based on selected criteria
            const applyFilters = () => {
                let filtered = [...allPayments];

                // Filter by beneficiary
                if (selectedBeneficiary !== 'All') {
                    filtered = filtered.filter(p => p.beneficiaryName === selectedBeneficiary);
                }

                // Filter by search term
                if (searchTerm) {
                    filtered = filtered.filter(p => 
                        p.beneficiaryName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        p.creditNarrative.toLowerCase().includes(searchTerm.toLowerCase())
                    );
                }

                // Filter by date range
                if (dateRange.start && dateRange.end) {
                    const start = new Date(dateRange.start);
                    const end = new Date(dateRange.end);
                    filtered = filtered.filter(p => p.paymentDate >= start && p.paymentDate <= end);
                }

                setFilteredPayments(filtered);
            };

            // Apply filters when criteria change
            useEffect(() => {
                applyFilters();
            }, [selectedBeneficiary, dateRange, searchTerm, allPayments]);

            // Prepare chart data
            const chartData = useMemo(() => {
                const monthlyData = {};
                
                filteredPayments.forEach(payment => {
                    const monthKey = payment.paymentDate.toLocaleDateString('en-IN', { 
                        year: 'numeric', 
                        month: 'short' 
                    });
                    
                    if (!monthlyData[monthKey]) {
                        monthlyData[monthKey] = 0;
                    }
                    monthlyData[monthKey] += payment.amount;
                });

                return Object.entries(monthlyData)
                    .map(([month, amount]) => ({ month, amount }))
                    .sort((a, b) => new Date(a.month + ' 1') - new Date(b.month + ' 1'));
            }, [filteredPayments]);

            // Beneficiary summary data
            const beneficiarySummary = useMemo(() => {
                const summary = {};
                
                filteredPayments.forEach(payment => {
                    if (!summary[payment.beneficiaryName]) {
                        summary[payment.beneficiaryName] = {
                            totalAmount: 0,
                            transactionCount: 0,
                            lastPayment: payment.paymentDate
                        };
                    }
                    
                    summary[payment.beneficiaryName].totalAmount += payment.amount;
                    summary[payment.beneficiaryName].transactionCount += 1;
                    
                    if (payment.paymentDate > summary[payment.beneficiaryName].lastPayment) {
                        summary[payment.beneficiaryName].lastPayment = payment.paymentDate;
                    }
                });

                return Object.entries(summary)
                    .map(([name, data]) => ({ name, ...data }))
                    .sort((a, b) => b.totalAmount - a.totalAmount);
            }, [filteredPayments]);

            // Download CSV
            const downloadCSV = () => {
                const headers = ['Beneficiary Name', 'Amount (Rs)', 'Payment Date', 'Payment Mode', 'Credit Narrative', 'Account Number', 'IFSC Code', 'File Source'];
                
                const csvContent = [
                    headers.join(','),
                    ...filteredPayments.map(p => [
                        `"${p.beneficiaryName}"`,
                        p.amount,
                        p.paymentDate.toLocaleDateString('en-IN'),
                        `"${p.paymentMode}"`,
                        `"${p.creditNarrative}"`,
                        `"${p.accountNumber}"`,
                        `"${p.ifscCode}"`,
                        `"${p.fileName}"`
                    ].join(','))
                ].join('\n');

                const blob = new Blob([csvContent], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `payment_analysis_${new Date().toISOString().split('T')[0]}.csv`;
                a.click();
                window.URL.revokeObjectURL(url);
            };

            // Download Summary Excel
            const downloadSummary = () => {
                const wb = XLSX.utils.book_new();
                
                // Summary sheet
                const summaryData = beneficiarySummary.map(b => ({
                    'Beneficiary Name': b.name,
                    'Total Amount (Rs)': b.totalAmount,
                    'Transaction Count': b.transactionCount,
                    'Last Payment Date': b.lastPayment.toLocaleDateString('en-IN')
                }));
                
                const summaryWS = XLSX.utils.json_to_sheet(summaryData);
                XLSX.utils.book_append_sheet(wb, summaryWS, 'Summary');
                
                // Monthly totals sheet
                const monthlyData = chartData.map(d => ({
                    'Month': d.month,
                    'Total Amount (Rs)': d.amount
                }));
                
                const monthlyWS = XLSX.utils.json_to_sheet(monthlyData);
                XLSX.utils.book_append_sheet(wb, monthlyWS, 'Monthly Totals');
                
                XLSX.writeFile(wb, `payment_summary_${new Date().toISOString().split('T')[0]}.xlsx`);
            };

            const totalAmount = filteredPayments.reduce((sum, p) => sum + p.amount, 0);

            return (
                <div className="min-h-screen bg-gray-50 p-6">
                    <div className="max-w-7xl mx-auto">
                        <h1 className="text-3xl font-bold text-gray-900 mb-8 flex items-center gap-2">
                            <BarChartIcon />
                            Payment Analysis Dashboard
                        </h1>

                        {error && (
                            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                                {error}
                            </div>
                        )}

                        {/* File Upload Section */}
                        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                                <UploadIcon />
                                Upload Payment Files
                            </h2>
                            
                            <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                                <input
                                    type="file"
                                    multiple
                                    accept=".xlsx,.xls,.csv"
                                    onChange={handleFileUpload}
                                    className="hidden"
                                    id="file-upload"
                                    disabled={loading}
                                />
                                <label
                                    htmlFor="file-upload"
                                    className="cursor-pointer flex flex-col items-center gap-2"
                                >
                                    {loading ? (
                                        <div className="loading-spinner"></div>
                                    ) : (
                                        <div className="icon-large">
                                            <UploadIcon />
                                        </div>
                                    )}
                                    <span className="text-lg font-medium text-gray-700">
                                        {loading ? 'Processing files...' : 'Click to upload Excel files'}
                                    </span>
                                    <span className="text-sm text-gray-500">
                                        Support for .xlsx, .xls, .csv files (Max 50 files)
                                    </span>
                                </label>
                            </div>
                            
                            {uploadedFiles.length > 0 && (
                                <div className="mt-4">
                                    <p className="text-sm text-gray-600 mb-2">Uploaded files ({uploadedFiles.length}):</p>
                                    <div className="flex flex-wrap gap-2">
                                        {uploadedFiles.map((fileName, index) => (
                                            <span key={index} className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                                                {fileName}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        {allPayments.length > 0 && (
                            <>
                                {/* Filters Section */}
                                <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                                    <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                                        <FilterIcon />
                                        Filters & Search
                                    </h2>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Beneficiary
                                            </label>
                                            <select
                                                value={selectedBeneficiary}
                                                onChange={(e) => setSelectedBeneficiary(e.target.value)}
                                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            >
                                                {beneficiaries.map(name => (
                                                    <option key={name} value={name}>{name}</option>
                                                ))}
                                            </select>
                                        </div>
                                        
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Start Date
                                            </label>
                                            <input
                                                type="date"
                                                value={dateRange.start}
                                                onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            />
                                        </div>
                                        
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                End Date
                                            </label>
                                            <input
                                                type="date"
                                                value={dateRange.end}
                                                onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            />
                                        </div>
                                        
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Search
                                            </label>
                                            <div className="relative">
                                                <div className="absolute left-3 top-3">
                                                    <SearchIcon />
                                                </div>
                                                <input
                                                    type="text"
                                                    placeholder="Search beneficiary..."
                                                    value={searchTerm}
                                                    onChange={(e) => setSearchTerm(e.target.value)}
                                                    className="w-full border border-gray-300 rounded-md pl-10 pr-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Summary Cards */}
                                <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="text-sm font-medium text-gray-600">Total Amount</p>
                                                <p className="text-2xl font-bold text-gray-900">
                                                    ₹{totalAmount.toLocaleString('en-IN')}
                                                </p>
                                            </div>
                                            <div className="bg-green-100 p-3 rounded-full">
                                                <BarChartIcon />
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="text-sm font-medium text-gray-600">Total Transactions</p>
                                                <p className="text-2xl font-bold text-gray-900">
                                                    {filteredPayments.length}
                                                </p>
                                            </div>
                                            <div className="bg-blue-100 p-3 rounded-full">
                                                <CalendarIcon />
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="text-sm font-medium text-gray-600">Unique Beneficiaries</p>
                                                <p className="text-2xl font-bold text-gray-900">
                                                    {beneficiarySummary.length}
                                                </p>
                                            </div>
                                            <div className="bg-purple-100 p-3 rounded-full">
                                                <UsersIcon />
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="text-sm font-medium text-gray-600">Average Payment</p>
                                                <p className="text-2xl font-bold text-gray-900">
                                                    ₹{filteredPayments.length > 0 ? Math.round(totalAmount / filteredPayments.length).toLocaleString('en-IN') : '0'}
                                                </p>
                                            </div>
                                            <div className="bg-orange-100 p-3 rounded-full">
                                                <BarChartIcon />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Charts Section */}
                                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <h3 className="text-lg font-semibold mb-4">Monthly Payment Trends</h3>
                                        <ResponsiveContainer width="100%" height={300}>
                                            <BarChart data={chartData}>
                                                <CartesianGrid strokeDasharray="3 3" />
                                                <XAxis dataKey="month" />
                                                <YAxis />
                                                <Tooltip formatter={(value) => [`₹${value.toLocaleString('en-IN')}`, 'Amount']} />
                                                <Bar dataKey="amount" fill="#3B82F6" />
                                            </BarChart>
                                        </ResponsiveContainer>
                                    </div>
                                    
                                    <div className="bg-white rounded-lg shadow-md p-6">
                                        <h3 className="text-lg font-semibold mb-4">Payment Trend Line</h3>
                                        <ResponsiveContainer width="100%" height={300}>
                                            <LineChart data={chartData}>
                                                <CartesianGrid strokeDasharray="3 3" />
                                                <XAxis dataKey="month" />
                                                <YAxis />
                                                <Tooltip formatter={(value) => [`₹${value.toLocaleString('en-IN')}`, 'Amount']} />
                                                <Line type="monotone" dataKey="amount" stroke="#10B981" strokeWidth={3} />
                                            </LineChart>
                                        </ResponsiveContainer>
                                    </div>
                                </div>

                                {/* Download Section */}
                                <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                                    <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                                        <DownloadIcon />
                                        Download Reports
                                    </h2>
                                    
                                    <div className="flex flex-wrap gap-4">
                                        <button
                                            onClick={downloadCSV}
                                            className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md flex items-center gap-2"
                                        >
                                            <DownloadIcon />
                                            Download Detailed Data (CSV)
                                        </button>
                                        
                                        <button
                                            onClick={downloadSummary}
                                            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md flex items-center gap-2"
                                        >
                                            <DownloadIcon />
                                            Download Summary (Excel)
                                        </button>
                                    </div>
                                </div>

                                {/* Beneficiary Summary Table */}
                                <div className="bg-white rounded-lg shadow-md p-6">
                                    <h2 className="text-xl font-semibold mb-4">Beneficiary Summary</h2>
                                    
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full table-auto">
                                            <thead>
                                                <tr className="bg-gray-50">
                                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Beneficiary Name
                                                    </th>
                                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Total Amount (₹)
                                                    </th>
                                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Transactions
                                                    </th>
                                                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Last Payment
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {beneficiarySummary.slice(0, 10).map((beneficiary, index) => (
                                                    <tr key={index} className="hover:bg-gray-50">
                                                        <td className="px-4 py-2 text-sm font-medium text-gray-900">
                                                            {beneficiary.name}
                                                        </td>
                                                        <td className="px-4 py-2 text-sm text-gray-900">
                                                            ₹{beneficiary.totalAmount.toLocaleString('en-IN')}
                                                        </td>
                                                        <td className="px-4 py-2 text-sm text-gray-900">
                                                            {beneficiary.transactionCount}
                                                        </td>
                                                        <td className="px-4 py-2 text-sm text-gray-900">
                                                            {beneficiary.lastPayment.toLocaleDateString('en-IN')}
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                    
                                    {beneficiarySummary.length > 10 && (
                                        <p className="text-sm text-gray-600 mt-4">
                                            Showing top 10 beneficiaries. Download detailed report for complete data.
                                        </p>
                                    )}
                                </div>
                            </>
                        )}
                    </div>
                </div>
            );
        };

        // Wait for all dependencies to load
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.getElementById('loading-message').style.display = 'none';
                ReactDOM.render(React.createElement(PaymentDashboard), document.getElementById('root'));
            }, 1000);
        });
    </script>
</body>
</html>
